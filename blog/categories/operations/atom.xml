<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Operations | Kaffke.ws]]></title>
  <link href="http://kaffke.ws/blog/categories/operations/atom.xml" rel="self"/>
  <link href="http://kaffke.ws/"/>
  <updated>2015-02-03T18:25:17+01:00</updated>
  <id>http://kaffke.ws/</id>
  <author>
    <name><![CDATA[Julian Kaffke]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Octopress on CoreOS]]></title>
    <link href="http://kaffke.ws/blog/2015/02/03/running-octopress-on-coreos/"/>
    <updated>2015-02-03T15:30:47+01:00</updated>
    <id>http://kaffke.ws/blog/2015/02/03/running-octopress-on-coreos</id>
    <content type="html"><![CDATA[<p>In this post I will report my experiences and the challenges I had to fight regarding my first steps to CoreOS</p>

<p><em>CoreOS</em> is an operating system built to run <em>docker</em> containers with clustering and high availability in mind.</p>

<p>I will write a tutorial on setting up CoreOS clusters manually any time soon. For now I just assume you followed this <a href="https://coreos.com/docs/running-coreos/cloud-providers/ec2/">Guide</a> to have a 3 machine CoreOS Cluster on EC2.</p>

<h3>Let&rsquo;s start with the basics</h3>

<p>While you just by some clicks should have a running CoreOS cluster now, let&rsquo;s make sure you connect to it the right way:</p>

<p>You should check, if your ssh-agent has the right key
{% codeblock %}
$ ssh-add -l
{% endcodeblock %}</p>

<p>This should output your key. If it doesn&rsquo;t, just add it by typing:
{% codeblock %}
$ ssh-add ~/.ssh/<YOUR KEY>
{% endcodeblock %}</p>

<p>and check again.</p>

<p>If everything is okay, then ssh into one of your instances via ssh
{% codeblock %}
$ ssh core@<ip address>
{% endcodeblock %}</p>

<p>{% blockquote %}
Note: To interact with your CoreOS node, you have to use the <code>core</code> user.
{% endblockquote %}</p>

<p>Now you should be logged in. Yay!</p>

<h4>Listing your machines</h4>

<p>To list your machines in your cluster type:
{% codeblock %}
$ fleetctl list-machines
{% endcodeblock %}</p>

<p>Your output should look like this:
{% codeblock %}
core@ip-172-31-20-92 ~ $ fleetctl list-machines
MACHINE   IP    METADATA
23bd9809&hellip; 172.31.2.187  -
3a27d588&hellip; 172.31.20.92  -
b427ca07&hellip; 172.31.20.93  -
{% endcodeblock %}</p>

<p>In the first column you&rsquo;ll see the abbreviated form of the hash representing your machine</p>

<p>the second one is the IP of that machine</p>

<p>and the third one contains metadata (if present)</p>

<p>You&rsquo;ll probably be a little impatient, so we&rsquo;ll start now by running a docker container:
{% codeblock %}
core@ip-172-31-20-92 ~ $ sudo docker run -i -t ubuntu /bin/bash
Unable to find image &lsquo;ubuntu&rsquo; locally
Pulling repository ubuntu
5ba9dab47459: Download complete
511136ea3c5a: Download complete
27d47432a69b: Download complete
5f92234dcf1e: Download complete
51a9c7c1f8bb: Download complete
Status: Downloaded newer image for ubuntu:latest
root@a2bb40cdaf38:/#</p>

<p>Yay a command prompt of the newly created ubuntu container :-)</p>

<p>But that&rsquo;s definetly not the way you want to run docker containers on CoreOS.
Enter <em>systemd</em> and <em>fleet</em>.</p>

<h3>systemd</h3>

<p>Systemd is the service layer of the CoreOS concept. You can read more about systemd on the official page.</p>

<p>core@ip-172-31-20-92 ~ $ ls -al /etc/systemd/system/
total 8
drwxr-xr-x 1 root root  98 Feb  3 13:29 .
drwxr-xr-x 1 root root 252 Jan 28 09:30 ..
lrwxrwxrwx 1 root root   9 Feb  3 13:29 user-configdrive.service -> /dev/null
lrwxrwxrwx 1 root root   9 Feb  3 13:29 user-configvirtfs.service -> /dev/null</p>

<p>$ sudo vim /etc/systemd/system/hello.service</p>

<p>{% codeblock %}
[Unit]
Description=MyApp
After=docker.service
Requires=docker.service</p>

<p>[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill busybox1
ExecStartPre=-/usr/bin/docker rm busybox1
ExecStartPre=/usr/bin/docker pull busybox
ExecStart=/usr/bin/docker run &ndash;name busybox1 busybox /bin/sh -c &ldquo;while true; do echo Hello World; sleep 1; done&rdquo;</p>

<p>[Install]
WantedBy=multi-user.target
{% endcodeblock %}</p>

<p>$ sudo systemctl enable /etc/systemd/system/hello.service
Created symlink from /etc/systemd/system/multi-user.target.wants/hello.service to /etc/systemd/system/hello.service.</p>

<p>$ sudo systemctl start hello.service</p>

<p>core@ip-172-31-20-92 ~ $ docker ps -a
CONTAINER ID        IMAGE                       COMMAND                CREATED             STATUS                     PORTS               NAMES
46d53ab5ddf0        busybox:buildroot-2014.02   &ldquo;/bin/sh -c &lsquo;while t   55 seconds ago      Up 55 seconds                                  busybox1
a2bb40cdaf38        ubuntu:14.04                &rdquo;/bin/bash&#8221;            23 minutes ago      Exited (0) 7 minutes ago                       jovial_perlman</p>

<p>core@ip-172-31-20-92 ~ $ journalctl -f -u hello.service
&ndash; Logs begin at Tue 2015-02-03 13:29:00 UTC. &ndash;
Feb 03 16:29:46 ip-172-31-20-92.eu-central-1.compute.internal docker[2387]: Hello World
Feb 03 16:29:47 ip-172-31-20-92.eu-central-1.compute.internal docker[2387]: Hello World
Feb 03 16:29:48 ip-172-31-20-92.eu-central-1.compute.internal docker[2387]: Hello World
Feb 03 16:29:49 ip-172-31-20-92.eu-central-1.compute.internal docker[2387]: Hello World</p>
]]></content>
  </entry>
  
</feed>
